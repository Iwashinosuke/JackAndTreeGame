ビルドはcmakeで行います。ただし、WindowsとLinuxでビルドディレクトリを分けるため(キャッシュの都合)、実際の実行はbuild.shから行ってください。
cmakeコマンドの例(今回は不使用):
 cmake -S . -B build
 cmake --build build

ビルドコマンド:(chmod 755権限付与をしたあと)
    sudo ./build.sh {targetOS} {buildType}
targetOS = windows, linux
buildType = Debug, Release, RelWithDebInfo, MinSizeRel


Dockerコンテナ内でbuild.shを実行すると、
bash: ./build.sh: cannot execute: required file not found
というエラーが発生する場合があります。その場合は、新しいshファイルを同じディレクトリ上に作り、そこにbuild.shの内容をコピペして実行してください。
(原因不明の現象らしいです。解決待ち)
参考:
https://unix.stackexchange.com/questions/721844/linux-bash-shell-script-error-cannot-execute-required-file-not-found


開発環境(Iwashinosuke):
WSL Ubuntu-24.04 LTS
ホストOS: Windows 11
アーキテクチャ: x86_64

git clone https://github.com/libsdl-org/SDL.git
で取得したSDL3プロジェクトをドキュメントに従いビルド・インストール済み


CMakeはデフォルトで4タイプの最適化オブションを持ちます。
(Debug, Release, RelWithDebInfo, MinSizeRel)
モード切り替え:
cmake . -DCMAKE_BUILD_TYPE=Release
実行時選択:
cmake --build . --config Release

CMakeでのSDL3の扱いについて→ https://wiki.libsdl.org/SDL3/README/cmake


https://github.com/libsdl-org/SDL/issues/11283
直でインストールされたSDL3(MinGWでない方)でコンパイルするときは、オプションでの設定を忘れずに
(↑CMakeでコンパイルする場合は必要ありません)
例:
g++ -o 実行ファイル名 ソース `pkg-config sdl3 --cflags --libs` 

